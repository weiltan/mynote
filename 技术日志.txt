定接口的时候， 输入输出，调用者能满足吗，  提供者， 能提供吗。 10:41 2016-11-29

方法注释对外部调用封闭， 对方法本身耦合。 10:42 2016-11-21

感觉目前的资金源，缺架构师，设计细节方案的架构师。 10:24 2016-11-21  或者得我们自己设计？ 10:24 2016-11-21

与人交互时， 跳出程序员码砖思维， 站在业务的角度， 跳出自己写的程序，  站在对方要做的事情上， 和对方交流业务。 10:58 2016-11-18   避免了答非所问， 避免了码砖细节。 10:59 2016-11-18

懒惰与急进，是bug之源啊。 15:25 2016-11-17

刚上线的项目， 配置， 先写数据库里。 17:14 2016-11-14  稳定之后， 迁移到配置文件里 17:14 2016-11-14    或者提供服务， 重新读取配置文件。 17:17 2016-11-14

提醒/引导同事写更好的注释。 15:25 2016-11-14  聪明的同事，会采取/学习良好的编码行为。 15:25 2016-11-14

账务查状态的bug， 查询不到银盛的状态。（银盛5分钟给不了结果的话）   支付系统的bug， 支付请求， 发不到招行。 11:27 2016-11-14

词语：更具体、更抽象。 12:20 2016-11-12

站在程序执行的角度，站在IDE debug的角度， 站在测试黑盒的角度， check 自己的程序。 14:55 2016-11-10

常规的操作，流程固化，流水线一样固化操作。 10:19 2016-11-10

最后补充单元测试。 10:11 2016-11-10

SFTP 获取文件的InputStream的时候， InputStream数据读取完之前， 不能关闭SFTP连接。 18:22 2016-11-9   删除文件，要关闭Stream。 flush。 18:37 2016-11-9

资源的释放。 SFTP。 13:14 2016-11-9

Debug工具、测试工程师，包括开发工程师， 都是为了， 包括IDE，更是为了更好的完成、完善Task。 12:36 2016-11-9   很好的利用起来。 12:36 2016-11-9

对外依赖接口/数据查询接口，都要做为空验证。 9:26 2016-11-8

InstalmentObjects行多，列少。 会不会用列数据库，效果更好一点。 18:00 2016-11-1

Jira的任务跟踪功能，很强大。18:07 2016-10-31

系统的工作方法。 15:14 2016-10-31

自动化build，自动化报错。10:42 2016-10-31

我有的时候，是不是高度小问题的难度了。 11:07 2016-10-27

采纳他们的一点点的小改进的意见。 10:07 2016-10-27  if-else-if  改为 if-continue分支。 10:31 2016-10-27

代码不局限于功能实现，还有方便测试，控制语句的业务逻辑，易于理解（代码清晰、简洁）。 9:22 2016-10-25

能对我的代码，提出改进意见的前提，不就是看懂我的代码了吗。 9:21 2016-10-25

代码风格：for循环里面，逻辑、代码尽量简单。 16:39 2016-10-24

git工作空间就一个。 14:01 2016-10-24

没有上线的功能，涉及的配置文件自动注入代码却上线了。 Staging测试报错。 按featrue拉分支。 18:40 2016-10-14

去IDE高亮化，摆脱IDE的功能，自己是程序的一次校验者，IDE是程序的二次校验者。11:21 2016-10-14

像编译器一样记住代码。11:10 2016-10-13

切换无线网络， 切换无线网。 14:22 2016-10-12

让程序，客观、理性的接近，事实需求。 18:17 2016-10-8

一键，部署、构建，工具。 11:52 2016-10-8

静下心来理清，程序前前后后一条线，发布接口、发布流程一条线，程序多输入、错数据、脏数据兼容扩充逻辑。 12:38 2016-9-30

边界。Boundary。 12:12 2016-9-29

代码可读性优化，提示/log日志优化。 19:34 2016-9-28  告一个段落就行，点到为止。 19:36 2016-9-28

从本地代码，到QA测试环境的路。 14:55 2016-9-27  到staging环境。 18:46 2016-9-28

Intellij IDEA每天下班时检查/关闭application测试程序。 9:49 2016-9-27

本地正确，才上QA。 18:26 2016-9-26

键值对形式的infobox，更容易get对象的信息。 11:58 2016-9-26

配置文件设置， 被忽略的地方， 然而启动服务器的时候很重要， 启动一次服务器， 要很久的。 15:46 2016-9-24

封装好自己的方案。 10:37 2016-9-24  然而自己用了%， 效率反而变低， 虽然减少了一次比较。 15:50 2016-9-24  老毛病又放了，花了很多时间做无用功。 15:54 2016-9-24  下次改进的时候， 评估一下先， 自己的能力够不够优化之。 15:55 2016-9-24 重视进度，进度。 16:58 2016-9-24
从进度上讲， 我的Comparation 逾期的不用比， 结果昨天我还是重构了 逾期 Comparation 函数。 17:03 2016-9-24

算法实现，即使是优化算法， 不能太懒散， 太耗时， 要专注, 要效率， 要验证， 要注释。 10:20 2016-9-24

log不能log密码、key等重要信息。 11:07 2016-9-23

兼容性不好， 重构时太累， SW。 文档文件名也得有规范，不然也会引起歧义， ZR。 10:33 2016-9-23

放低，简单口误、笔误， 找寻知识、重点。 21:16 2016-9-22

工作场景，重现平台。 20:10 2016-9-22

放大注意力，提高专注力， 不形于色。 18:21 2016-9-22

技术研发部， 没有技术研发。 技术问题来了， 导出救火。 技术研发， 以公司的需求为主， 走在公司技术需求的前面。 分库分表、分布式部署、监控。 15:40 2016-9-22

技术情怀。 20:11 2016-9-21

站在kb视角， code review 自己的代码。 19:39 2016-9-19

一轮操作，  经过一个周末， 就不好记住， 记个笔记。 15:05 2016-9-18

分表分库。 14:47 2016-9-18

技术可行性， 先阅读相关资料， 然后选型。 10:08 2016-9-18

发送大请求前，log一下， 接受到响应，log一下。 9:58 2016-9-14

个人：Google会让你变SB，IntelliJIDEA会让你变SB。 11:05 2016-9-13  Google会让人变SB，IntelliJIDEA会让人变SB 11:10 2016-9-13

不能依赖于，他人的接口。 10:45 2016-9-13

个人：懂一点计算机软件知识。 16:15 2016-9-12

实现想法不一样， 也会导致merge request的 discussion。 15:38 2016-9-12

mybatis  script  if else, while 控制流语法。 14:08 2016-9-12

运行程序，是对程序最好的测试。 （QA、生产）
对IDE过分的依赖，同样会“写出”bug， 和过度依赖Google 类似 对 IDE 过度依赖同样产生 惰性， 过度依赖IDE 产生语法正确， 语义不一定正确的 bug。 17:45 2016-9-11  语义正确，业务正确， 业务语义正确。 17:46 2016-9-11

快捷键、小技巧， 能提高一点点， 工作效率， 但别太注重这方便花太多时间， 重点在公司业务实现、业务逻辑， 自身代码质量。 15:49 2016-9-11 对外接口依赖。 15:49 2016-9-11

个人：注重可读性、可扩展性，注重代码的可读性（命名规范）、健壮性（多分支）、封装复用性。 15:46 2016-9-11

git cherry-pick 操作。 15:38 2016-9-11

站在写过这个代码的人的角度，看待自己的 merge request。  11:52 2016-9-10

惯性思维的不动态性。 10:44 2016-9-10

制定自己的code commit 合规规范： Create merge request之前，自己再看一遍、检查一遍自己的代码。 20:50 2016-9-9

太依赖GOOGLE， 导致自己的思考都没了，  竟然忘记， 类原始变量会被自动赋予初值。  15:27 2016-9-9  旁观者清， 找别人找错， 更清楚。 15:28 2016-9-9

testgn  测试方法用了private！ 打错特错！ 要用public。 11:12 2016-9-9

背包算法导致的内存溢出问题的改进策略：
tanlw：大内存对象写文件，或数据库
tanlw：去除static，Short 替换 Integer
开波：缩放目标值，
yucai：优化虚拟机设置，
tanlw：定时重启服务器， 缩放进件值，除以100(deprecated)
9:07 2016-9-9

补充服务器上的properties文件。 14:04 2016-9-6

Model类，添加toString重载方法，方便外部调用查看内部信息。 11:44 2016-9-5

我讨厌做重复的、SB的工作，所以要用到大量的模版。 11:21 2016-9-5

util工具包，第一时间同步到git库。 10:23 2016-9-5  或者，拆分提交， 先交Model dal， Model util， 最后在交 Service业务代码。 10:25 2016-9-5

文档写成， Model API， REST 接口。 10:05 2016-9-5

Maven 一键生成， 用自己的域帐号。 14:08 2016-9-2

缓存问题， 手机APP端 缓存问题。 17:42 2016-8-31

设置TestNG的默认 Working Directory。 11:24 2016-8-31

接口还是用List、Object去定义参数， appid在上层使用，读一次rest接口，多处使用。 17:47 2016-8-30

“公司名填了：邢台学院美术设计学院环境设计15级2班，顾客本人兼职家教，教五六年级数学，一节课50元，顾客通过大学兼职群515433177找工作，顾客家人也知道顾客兼职家教！顾客姐姐邢硕。  数据库兼容脏数据。” 11:33 2016-8-30  我测试了Max username， 没有测试Max company_name. 11:34 2016-8-30

代码健壮性，可读性。 17:33 2016-8-29

分布式系统，缓存技术。 10:55 2016-8-29

在 TestNG 测试类中使用 @Value 注入是否有问题， 只能 通过@Compent 让Spring 管理@Value注入， 然后在 TestNG测试类中 Autowire一个Compent类。 18:48 2016-8-26

公司用的测试框架是TestNG. 16:58 2016-8-26

福昕阅读器  注释说明， 高亮：代表工作要求。 16:21 2016-8-22

习惯：面向rest服务拿数据。 12:03 2016-8-19

优秀框架、代码的源码。 11:08 2016-8-17

写出这么多编译出错的代码， 是对编译工具太依赖了。 10:18 2016-8-17

代码可读性  意味着  代码的可维护性！ 15:36 2016-8-15

先验知识，是同步交流的基础和障碍。 20:13 2016-8-12

数据紧耦合的SQL语句，要不得！ 生产环境，脏数据问题。 19:09 2016-8-12 

lambda 表达式。 19:40 2016-8-10

git clone ssh://git@gitlab.fenqi.im:10022/r_d_arch_team/arch-sample.git 18:23 2016-8-8 一旦git就死机。 18:23 2016-8-8

为IDE 添加反编译工具。 17:27 2016-8-8

运行时正确， 数据不一定都not null。 13:12 2016-8-3

Kindle 文字加亮色， 红色：原因， 蓝色：属性， 黄色：例子。 9:42 2016-7-31

公司提供的jar， 没有一起提供source-jar。 9:27 2016-7-31

已有的：算法、设计模式、框架， 都是现有的、重复的问题。 10:19 2016-7-26  不是创新性的问题。  刷了这些重复的问题。 10:20 2016-7-26

分布式系统，编程。  13:45 2016-7-25

Java 反射技术 的学习 及应用。  19:38 2016-7-24

消息队列，Listener 13:45 2016-6-22

代码里面类，没有注释，方法没有注释。看着，真的一点都不亲切。 15:52 16/6/20

字符组成的命令，是不满足交换律的，所以敲字符的时候， 注意顺序。  15:11 16/6/20

IDEA,  Ctrl + Shift + A ,Reimport all maven Project18:08 2016-6-13

OA流程申请，文字描述200字太小，申请的流程，不支持编辑/删除。10:23 2016/5/27

Tower文档编辑功能，不包含文档预览功能。10:57 2016/5/26

'CowfishAdminNodeServer' debug的时候，需要配置npmrc（找张三李四下载）16:18 2016/5/24

Win + R，不能运行文件带“.”的快捷方式。10:18 2016/5/17

前端测试与后端测试分离，gulp。11:12 2016/5/16

gulp debug
后，浏览器地址，要追加项目名称到具体HTML文件的相对路径。17:23 2016/5/13


D:\Users\tanlw\workspace\CashLoan\CowfishFE\FE.admin  目录下安装gulp
使用命令：npm install --save-dev gulp 安装， 安装步骤见“FE.admin\README.md”
15:09 2016/5/13
添加对应的环境变量：D:\Users\tanlw\workspace\CashLoan\CowfishFE\FE.admin\node_modules\.bin
后使用gulp命令 安装其它插件。
15:14 2016/5/13

敏捷开发 sprint	  10:35 2016/5/12

select afc.appid, afc.userid, afc.principal, afc.MoneyTransferredOn, afc.bankName, afc.bankAccount, afc.overdueStatus, afc.dfReqTime, yjcr.success, yjcr.service, yjcr.orderNo, yjcr.resultCode, yjcr.resultMessage from
(SELECT * FROM dbo.AppFundCashierSnapshotObjects where MoneyTransferredOn is not null and appcategory='CL') afc
left join dbo.YijiContractObjects yjc on yjc.AppId=afc.AppId
left join dbo.YijiCommonResponseObjects yjcr on yjcr.appid=afc.appid
where yjc.ContractNo is NULL and yjcr.service='InstallmentSign'
and not exists (select 1 from
(SELECT AppId FROM dbo.AppFundCashierSnapshotObjects where MoneyTransferredOn is not null and appcategory='CL' and AppId = afc.AppId) afc_inner
left join dbo.YijiContractObjects yjc_inner on yjc_inner.AppId=afc_inner.AppId
left join dbo.YijiCommonResponseObjects yjcr_inner on yjcr_inner.appid=afc_inner.appid
where yjc_inner.ContractNo is not NULL and yjcr_inner.service='InstallmentSign');
10:34 2016/5/12

use mysql;
update user u set u.`Password` = 'root' where u.`User` = 'root';
use mysql;
update user set password = `root` where user = `root`;
